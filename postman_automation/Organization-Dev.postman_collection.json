{
	"info": {
		"_postman_id": "10752017-0edb-4941-bdcb-ff36c5c56fd5",
		"name": "Organization - Dev",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "End to End flow",
			"item": [
				{
					"name": "Get Token Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "be21c948-dd00-4bd4-9183-6ea430b1a509",
								"exec": [
									"pm.environment.set(\"username\", \"lfu35\");\r",
									"pm.environment.set(\"password\", \"DRftgyhu@12\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5647f531-647b-4129-b697-7debcdadec50",
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"token\", jsonData.id_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"grant_type\": \"http://auth0.com/oauth/grant-type/password-realm\",\r\n    \"realm\": \"Username-Password-Authentication\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"client_id\": \"hquZHO8JNsaIScoayPtCS5VELdn7TnVq\",\r\n    \"audience\": \"https://api-gw.dev.platform.linuxfoundation.org/\",\r\n    \"scope\": \"access:api openid profile email\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://linuxfoundation-dev.auth0.com/oauth/token",
							"protocol": "https",
							"host": [
								"linuxfoundation-dev",
								"auth0",
								"com"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User Role Scope Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d136485d-6e1b-486b-9939-904db0490558",
								"exec": [
									"pm.globals.set(\"Role_ID\", \"97573b76-f558-46c7-a8a5-65c7afe7fb5e\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "083c408c-9442-4df8-9647-9d5210619954",
								"exec": [
									"pm.test(\"User Role Scope Assignment 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(pm.globals.get(\"Role_ID\"));\r",
									"\r",
									"pm.globals.set(\"Scope_ID\", jsonData.RoleScopes[0].Scopes[0].ScopeID);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"EmailAddress\": \"rajashreeb+553@proximabiz.com\",\r\n  \"ObjectID\": \"a096s000000371EAAQ|0014100000TdzaXAAR\",\r\n  \"ObjectType\": \"project|organization\",\r\n  \"RoleID\": \"{{Role_ID}}\"\r\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000TdzaXAAR/scopes",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000TdzaXAAR",
								"scopes"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Service User Scope Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "887f6a2f-6956-497d-950b-50ea648905a6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Scope ID added in List Service Scope\", () => {\r",
									"    var flag = false;\r",
									"//console.log(response.userroles);\r",
									"outerloop:\r",
									"for(var i=0; i<response.userroles.length;i++)\r",
									"{\r",
									"    roleScopes = response.userroles[i].RoleScopes;\r",
									"    for(var j=0; j<roleScopes.length;j++)\r",
									"    {\r",
									"      for(var k=0; k<roleScopes[j].Scopes.length;k++)\r",
									"        {\r",
									"            if(roleScopes[j].Scopes[k].ScopeID=\"{{Scope_ID}}\")\r",
									"            {\r",
									"                flag = true;\r",
									"                break outerloop;\r",
									"            }\r",
									"          \r",
									"        }\r",
									"    \r",
									"    }\r",
									"}\r",
									"    pm.expect(flag).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000TdzaXAAR/servicescopes",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000TdzaXAAR",
								"servicescopes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role Scope Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8613037c-0c09-4ae0-a7f5-32bfc45498f9",
								"exec": [
									"pm.test(\"Update User Role Scope 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ObjectID\": \"{{Org_ID}}\",\r\n  \"ObjectType\": \"organization\",\r\n  \"RoleID\": \"{{Role_ID}}\",\r\n  \"ScopeID\": \"{{Scope_ID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000TdzaXAAR/scopes/{{Scope_ID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000TdzaXAAR",
								"scopes",
								"{{Scope_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Role Scope Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e73ffe4e-0db3-4436-93f3-b94ce4abd05f",
								"exec": [
									"pm.test(\"Delete User Role Scope 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/roles/{{Role_ID}}/scopes/{{Scope_ID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0016s000004DAOKAA4",
								"roles",
								"{{Role_ID}}",
								"scopes",
								"{{Scope_ID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Automation",
			"item": [
				{
					"name": "Get Tokens",
					"item": [
						{
							"name": "Get Token of Company Owner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e8a01665-b864-48ff-b719-2492d44cd9af",
										"exec": [
											"pm.environment.set(\"username\", \"lfu4\");\r",
											"pm.environment.set(\"password\", \"DRftgyhu@12\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e867f5fd-7da8-4e40-92c8-f15aa7b0ecd7",
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.globals.set(\"co_token\", jsonData.id_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Authorization}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grant_type\": \"http://auth0.com/oauth/grant-type/password-realm\",\r\n    \"realm\": \"Username-Password-Authentication\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"client_id\": \"hquZHO8JNsaIScoayPtCS5VELdn7TnVq\",\r\n    \"audience\": \"https://api-gw.dev.platform.linuxfoundation.org/\",\r\n    \"scope\": \"access:api openid profile email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://linuxfoundation-dev.auth0.com/oauth/token",
									"protocol": "https",
									"host": [
										"linuxfoundation-dev",
										"auth0",
										"com"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Token of Superadmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3fca045a-9a5b-4fc5-9986-f4799e0b406c",
										"exec": [
											"pm.environment.set(\"username\", \"yogesh.chaudhari\");\r",
											"pm.environment.set(\"password\", \"DRftgyhu@12\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0d2dfc48-47bc-418e-9b65-6879c9cf04e8",
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.globals.set(\"s_admin_token\", jsonData.id_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Authorization}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grant_type\": \"http://auth0.com/oauth/grant-type/password-realm\",\r\n    \"realm\": \"Username-Password-Authentication\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"client_id\": \"hquZHO8JNsaIScoayPtCS5VELdn7TnVq\",\r\n    \"audience\": \"https://api-gw.dev.platform.linuxfoundation.org/\",\r\n    \"scope\": \"access:api openid profile email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://linuxfoundation-dev.auth0.com/oauth/token",
									"protocol": "https",
									"host": [
										"linuxfoundation-dev",
										"auth0",
										"com"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Token of User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3cfe2153-f831-44a0-8f79-2df7c6928b4f",
										"exec": [
											"pm.environment.set(\"username\", \"lfu2\");\r",
											"pm.environment.set(\"password\", \"DRftgyhu@12\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7862a4d-fbc9-4e48-bc93-a24ddd5f2204",
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.globals.set(\"user_token\", jsonData.id_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Authorization}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grant_type\": \"http://auth0.com/oauth/grant-type/password-realm\",\r\n    \"realm\": \"Username-Password-Authentication\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"client_id\": \"hquZHO8JNsaIScoayPtCS5VELdn7TnVq\",\r\n    \"audience\": \"https://api-gw.dev.platform.linuxfoundation.org/\",\r\n    \"scope\": \"access:api openid profile email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://linuxfoundation-dev.auth0.com/oauth/token",
									"protocol": "https",
									"host": [
										"linuxfoundation-dev",
										"auth0",
										"com"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Token of LF Program Manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "32574473-75b2-4fdf-9b54-e160c980e2c5",
										"exec": [
											"pm.environment.set(\"username\", \"lfu36\");\r",
											"pm.environment.set(\"password\", \"DRftgyhu@12\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5dcc054e-e66e-4bfb-9f25-7ddc324dc91b",
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.globals.set(\"lf_pm_token\", jsonData.id_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Authorization}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grant_type\": \"http://auth0.com/oauth/grant-type/password-realm\",\r\n    \"realm\": \"Username-Password-Authentication\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"client_id\": \"hquZHO8JNsaIScoayPtCS5VELdn7TnVq\",\r\n    \"audience\": \"https://api-gw.dev.platform.linuxfoundation.org/\",\r\n    \"scope\": \"access:api openid profile email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://linuxfoundation-dev.auth0.com/oauth/token",
									"protocol": "https",
									"host": [
										"linuxfoundation-dev",
										"auth0",
										"com"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Token of Community Manager",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2c7b381a-dedd-4fa0-a388-4246f8e0d1c2",
										"exec": [
											"pm.environment.set(\"username\", \"lfu5\");\r",
											"pm.environment.set(\"password\", \"DRftgyhu@12\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "87d29abd-0be4-44e1-bf73-2721ff6efb0b",
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.globals.set(\"com_mngr_token\", jsonData.id_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{Authorization}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grant_type\": \"http://auth0.com/oauth/grant-type/password-realm\",\r\n    \"realm\": \"Username-Password-Authentication\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"client_id\": \"hquZHO8JNsaIScoayPtCS5VELdn7TnVq\",\r\n    \"audience\": \"https://api-gw.dev.platform.linuxfoundation.org/\",\r\n    \"scope\": \"access:api openid profile email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://linuxfoundation-dev.auth0.com/oauth/token",
									"protocol": "https",
									"host": [
										"linuxfoundation-dev",
										"auth0",
										"com"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "My Organization",
					"item": [
						{
							"name": "My Organization with new user",
							"item": [
								{
									"name": "Get My Organization for new user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa6af477-7a09-4dd8-8543-6f88d06dcab2",
												"exec": [
													"pm.test(\"Get My Organization : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"let jsonData = pm.response.json();\r",
													"console.log(jsonData.ID);\r",
													"pm.test(\"Default Organization appearing in response\", function () {\r",
													"   pm.expect(jsonData.ID).to.eql('0014100001NrJWnAAN');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/me",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"me"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "New user should get blank response for My Organization",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify restricted fields with User",
							"item": [
								{
									"name": "Don't display restricted fields to User role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bf8c831-62de-4ed8-8a7e-61122e73512d",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Restricted field Owner is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Owner != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Phone is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Phone != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Source is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Source != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Industry is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Industry != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedBy is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.LastModifiedBy != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedAt is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.LastModifiedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field CreatedAt is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.CreatedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field BillingAddress is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.BillingAddress != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Link is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Link != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/me",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"me"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "User role should not view restricted fields in response body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e2fa900-8a8c-4905-b1ff-c1fd4b74c376",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7257352b-5714-484b-86b1-197e77b23505",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify restricted fields with Company Owner",
							"item": [
								{
									"name": "Display Restricted fields to Company Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0063dd0-ab7a-48a7-b3a6-31333d559f1a",
												"exec": [
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Restricted field Owner is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Owner.Name != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Phone is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Phone != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Source is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Source != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Industry is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Industry != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedBy is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.LastModifiedBy != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.LastModifiedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field CreatedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.CreatedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field BillingAddress is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.BillingAddress != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Link is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Link != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{co_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/me",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"me"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Community manager should get assigned organization details in response",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify restricted fields with LF Program Manager",
							"item": [
								{
									"name": "Display Restricted fields to LF Program Manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d369d81a-c85a-4092-a05b-7500149fb6bf",
												"exec": [
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Restricted field Owner is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Owner.Name != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Phone is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Phone != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Source is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Source != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Industry is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Industry != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedBy is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.LastModifiedBy != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.LastModifiedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field CreatedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.CreatedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field BillingAddress is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.BillingAddress != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Link is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Link != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{lf_pm_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/me",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"me"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Community manager should get assigned organization details in response",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "My Organization with Community Manager",
							"item": [
								{
									"name": "Get My Organization for Community Manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34b4b82a-76b9-43c6-aaff-b455c92a13d4",
												"exec": [
													"pm.test(\"Get My Organization : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"let jsonData = pm.response.json();\r",
													"console.log(jsonData.ID);\r",
													"pm.test(\"Assigned Organization appearing in response\", function () {\r",
													"   pm.expect(jsonData.ID).to.eql('0016s000004DAOKAA4');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{com_mngr_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/me",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"me"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Community manager should get assigned organization details in response",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "My Organization with invalid token",
							"item": [
								{
									"name": "My Organization with invalid token should give 401",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "363b8f73-88f0-4c6c-8c8a-7af632b052ae",
												"exec": [
													"pm.test(\"Invalid token : 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"This is invalid token, please provide the valid token\");\r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer 123"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/me",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"me"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Community manager should get assigned organization details in response",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "My Organization with basic filter",
							"item": [
								{
									"name": "My Organization with basic filter true",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47de1f4f-d8d9-432e-8d81-696cf4ec513d",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"pm.test(\"Permission object should not be visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Permissions != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{com_mngr_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/me?basic=true",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"me"
											],
											"query": [
												{
													"key": "basic",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "My Organization with basic filter false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "443667e7-5ac5-41c8-86c8-18264260815e",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"pm.test(\"Permission object should be visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Permissions != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{com_mngr_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/me?basic=false",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"me"
											],
											"query": [
												{
													"key": "basic",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Community manager should get assigned organization details in response",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Test My Organization endpoints",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "User Role Scope Assignment",
					"item": [
						{
							"name": "Assign User Role Scope with valid Org ID",
							"item": [
								{
									"name": "Get Token Copy 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d9cf9c69-f62b-42b9-ad36-0fdc4beab474",
												"exec": [
													"pm.environment.set(\"username\", \"lfu563\");\r",
													"pm.environment.set(\"password\", \"DRftgyhu@12\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "218ec876-731f-4474-a8c8-4ccf31d12286",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.globals.set(\"token\", jsonData.id_token);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{Authorization}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grant_type\": \"http://auth0.com/oauth/grant-type/password-realm\",\r\n    \"realm\": \"Username-Password-Authentication\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"client_id\": \"hquZHO8JNsaIScoayPtCS5VELdn7TnVq\",\r\n    \"audience\": \"https://api-gw.dev.platform.linuxfoundation.org/\",\r\n    \"scope\": \"access:api openid profile email\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://linuxfoundation-dev.auth0.com/oauth/token",
											"protocol": "https",
											"host": [
												"linuxfoundation-dev",
												"auth0",
												"com"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Role Scope Copy 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "22f3e617-65d6-42ad-a0af-b9a861ae5b90",
												"exec": [
													"pm.globals.set(\"Role_ID\", \"97573b76-f558-46c7-a8a5-65c7afe7fb5e\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d4c72dca-47d8-477e-b2e7-ad7a6eb2e2eb",
												"exec": [
													"pm.test(\"User Role Scope Assignment 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"EmailAddress\": \"rajashreeb+582@proximabiz.com\",\r\n  \"ObjectID\": \"a096s000000371EAAQ|0014100000TdzaXAAR\",\r\n  \"ObjectType\": \"project|organization\",\r\n  \"RoleID\": \"{{Role_ID}}\"\r\n}   ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/scopes",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"scopes"
											]
										}
									},
									"response": []
								}
							],
							"description": "Assign User Role Scope with valid Org ID : should result 200",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Assign User Role Scope with other Org ID",
							"item": [
								{
									"name": "Create User Role Scope Copy 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5521ea2f-1d18-4b74-82e0-650160203703",
												"exec": [
													"pm.globals.set(\"Role_ID\", \"97573b76-f558-46c7-a8a5-65c7afe7fb5e\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d88437e0-34e3-42d5-bd29-730a12a7656f",
												"exec": [
													"pm.test(\"Wrong Org ID should responde 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"organization-service: user does not have permission to create an user role scope: forbidden\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"EmailAddress\": \"rajashreeb+553@proximabiz.com\",\r\n  \"ObjectID\": \"a096s000000371EAAQ|0014100000TdzaXAAR\",\r\n  \"ObjectType\": \"project|organization\",\r\n  \"RoleID\": \"{{Role_ID}}\"\r\n}   ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004OKAA4/scopes",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004OKAA4",
												"scopes"
											]
										}
									},
									"response": []
								}
							],
							"description": "To verify the API with valid bearer token",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Assign User Role Scope with invalid Role ID",
							"item": [
								{
									"name": "Create User Role Scope Copy 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6e36f935-d52c-4abc-b349-29b7da9bc44a",
												"exec": [
													"pm.globals.set(\"Role_ID\", \"97573b76-f558-46c7-a8a5-65c7afe7fb5e\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ae6cfa6e-b27b-4c4c-8d1a-6c9862ab9a33",
												"exec": [
													"pm.test(\"User Role Scope Assignment with wrong Role ID 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pq: invalid input syntax for uuid:\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"EmailAddress\": \"rajashreeb+553@proximabiz.com\",\r\n  \"ObjectID\": \"a096s000000371EAAQ|0014100000TdzaXAAR\",\r\n  \"ObjectType\": \"project|organization\",\r\n  \"RoleID\": \"12333\"\r\n}   ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/scopes",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"scopes"
											]
										}
									},
									"response": []
								}
							],
							"description": "Assign User Role Scope with invalid Role ID : should result 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1ca5b946-b893-41ed-a413-bfff668badf4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0f71b3cb-9dfe-42e9-9ac7-848d8866b216",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Assign User Role Scope with invalid user",
							"item": [
								{
									"name": "Create User Role Scope Copy 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "397f4628-52e1-4cc2-81ce-0ec252832085",
												"exec": [
													"pm.globals.set(\"Role_ID\", \"97573b76-f558-46c7-a8a5-65c7afe7fb5e\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "87b2f9f7-099d-4475-9ad8-bb148a78e452",
												"exec": [
													"pm.test(\"User Role Scope Assignment with other Org ID 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Valid error message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"user does not exist on platform, please invite the user via ACS invite endpoint using the email\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"EmailAddress\": \"rajashr+553@proximabiz.com\",\r\n  \"ObjectID\": \"a096s000000371EAAQ|0014100000TdzaXAAR\",\r\n  \"ObjectType\": \"project|organization\",\r\n  \"RoleID\": \"{{Role_ID}}\"\r\n}   ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/scopes",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"scopes"
											]
										}
									},
									"response": []
								}
							],
							"description": "Assign User Role Scope with invalid user : should result 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c5c7bde7-60bf-489e-8260-328754794509",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6cb6ef9c-fb02-4f95-9c7d-1805aae01c66",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "To verify the API without providing the organization ID in body",
							"item": [
								{
									"name": "Create User Role Scope Copy 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "01d2d049-98a9-4759-b463-b0f20b6eb93c",
												"exec": [
													"pm.globals.set(\"Role_ID\", \"97573b76-f558-46c7-a8a5-65c7afe7fb5e\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "32532352-245f-4782-9f28-6a8e90cf981f",
												"exec": [
													"pm.test(\"User Role Scope Assignment without org id 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"object_ids: non zero value required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"EmailAddress\": \"rajashreeb+553@proximabiz.com\",\r\n  \"ObjectID\": \"\",\r\n  \"ObjectType\": \"organization\",\r\n  \"RoleID\": \"{{Role_ID}}\"\r\n}   ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/scopes",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"scopes"
											]
										}
									},
									"response": []
								}
							],
							"description": "To verify the API without providing the organization ID in body : 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "db85859a-060d-4159-b447-476d7d504184",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0234c99c-85b9-485d-87f2-aae06a697ce8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create User Role Scope with Community Manager",
							"item": [
								{
									"name": "Get Token of Community Manager",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6ba33bd1-a453-4687-924d-9caa1389def5",
												"exec": [
													"pm.environment.set(\"username\", \"lfu563\");\r",
													"pm.environment.set(\"password\", \"DRftgyhu@12\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "088846bd-1edb-49ad-918e-bc7f0058a5b9",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.globals.set(\"token\", jsonData.id_token);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{Authorization}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grant_type\": \"http://auth0.com/oauth/grant-type/password-realm\",\r\n    \"realm\": \"Username-Password-Authentication\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"client_id\": \"hquZHO8JNsaIScoayPtCS5VELdn7TnVq\",\r\n    \"audience\": \"https://api-gw.dev.platform.linuxfoundation.org/\",\r\n    \"scope\": \"access:api openid profile email\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://linuxfoundation-dev.auth0.com/oauth/token",
											"protocol": "https",
											"host": [
												"linuxfoundation-dev",
												"auth0",
												"com"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Role Scope with Community Manager",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f3956267-56be-46a2-b45a-adb8a9f314aa",
												"exec": [
													"pm.globals.set(\"Role_ID\", \"97573b76-f558-46c7-a8a5-65c7afe7fb5e\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "887064ce-c745-43e9-aefe-7865485f13ed",
												"exec": [
													"pm.test(\"User Role Scope Assignment 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"console.log(pm.globals.get(\"Role_ID\"));\r",
													"\r",
													"pm.globals.set(\"Scope_ID\", jsonData.RoleScopes[0].Scopes[0].ScopeID);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"EmailAddress\": \"rajashreeb+33@proximabiz.com\",\r\n  \"ObjectID\": \"a096s000000371EAAQ|0016s000004DAOKAA4\",\r\n  \"ObjectType\": \"project|organization\",\r\n  \"RoleID\": \"{{Role_ID}}\"\r\n}   ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/scopes",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"scopes"
											]
										}
									},
									"response": []
								}
							],
							"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update User Role with Community Manager",
							"item": [
								{
									"name": "Update User Role Scope",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4330e408-eeb6-4228-b04b-609bc2663a42",
												"exec": [
													"pm.test(\"Update User Role Scope with Community Manager : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ObjectID\": \"0016s000004DAOKAA4\",\r\n  \"ObjectType\": \"organization\",\r\n  \"RoleID\": \"{{Role_ID}}\",\r\n  \"ScopeID\": \"{{Scope_ID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/scopes/{{Scope_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"scopes",
												"{{Scope_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update User Role with other Organization ID",
							"item": [
								{
									"name": "Update User Role Scope with other Org",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81b86e4b-3dc9-473c-aff4-931e87a861f8",
												"exec": [
													"pm.test(\"Update with other organization : 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"user can only be associated with company owner organization\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ObjectID\": \"0014100000TdzaXAAR\",\r\n  \"ObjectType\": \"organization\",\r\n  \"RoleID\": \"{{Role_ID}}\",\r\n  \"ScopeID\": \"{{Scope_ID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/scopes/{{Scope_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"scopes",
												"{{Scope_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update User Role with wrong scope id",
							"item": [
								{
									"name": "Update User Role Scope with wrong scope id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bb62741-d98f-47c5-a86e-8ce064694499",
												"exec": [
													"pm.test(\"Update with wrong Scope ID in url : 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"user grant doest not exits: not found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ObjectID\": \"0016s000004DAOKAA4\",\r\n  \"ObjectType\": \"organization\",\r\n  \"RoleID\": \"{{Role_ID}}\",\r\n  \"ScopeID\": \"{{Scope_ID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/scopes/1000",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"scopes",
												"1000"
											]
										}
									},
									"response": []
								}
							],
							"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update User Role with with Invalid Bearer token",
							"item": [
								{
									"name": "Update User Role Scope with Invalid Bearer token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f4e6cd1-8c5d-4c71-b02b-7faa3dcb6996",
												"exec": [
													"pm.test(\"Update User Role Scope with Community Manager : 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"This is invalid token, please provide the valid token\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer 2222"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ObjectID\": \"0016s000004DAOKAA4\",\r\n  \"ObjectType\": \"organization\",\r\n  \"RoleID\": \"{{Role_ID}}\",\r\n  \"ScopeID\": \"{{Scope_ID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/scopes/{{Scope_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"scopes",
												"{{Scope_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete User Role with Community Manager Copy",
							"item": [
								{
									"name": "Delete User Role Scope",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f84caeb-6771-4fb4-8fdd-cf5396056905",
												"exec": [
													"pm.test(\"Delete User Role Scope with Community Manager : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/roles/{{Role_ID}}/scopes/{{Scope_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"roles",
												"{{Role_ID}}",
												"scopes",
												"{{Scope_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete User Role by passing wrong Org id",
							"item": [
								{
									"name": "Delete User Role by passing wrong Org id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "660a0039-b828-4841-ba5f-430175510acb",
												"exec": [
													"pm.test(\"Delete User Role by passing wrong Org id : 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"user does not have permission to delete an user role scopes: forbidden\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s0DAOKAA4/roles/{{Role_ID}}/scopes/{{Scope_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s0DAOKAA4",
												"roles",
												"{{Role_ID}}",
												"scopes",
												"{{Scope_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete User Role with invalid token",
							"item": [
								{
									"name": "Delete User Role Scope with invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59f43acb-af6a-4a64-8a1a-1a3573c102d3",
												"exec": [
													"pm.test(\"Delete User Role Scope with invalid token : 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"This is invalid token, please provide the valid token\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer 122"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/roles/{{Role_ID}}/scopes/{{Scope_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"roles",
												"{{Role_ID}}",
												"scopes",
												"{{Scope_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete User Role which is already deleted",
							"item": [
								{
									"name": "Delete User Role Scope which is already deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64775515-5c53-4a42-8c64-f69e63b189af",
												"exec": [
													"pm.test(\"Delete User Role Scope which is already deleted : 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"user grant does not exists: not found\");\r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/roles/{{Role_ID}}/scopes/{{Scope_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"roles",
												"{{Role_ID}}",
												"scopes",
												"{{Scope_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create User Role Scope with User role",
							"item": [
								{
									"name": "Get Token of User",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f280a709-b4dc-47d5-9459-411b6e9c84a4",
												"exec": [
													"pm.environment.set(\"username\", \"lfu34\");\r",
													"pm.environment.set(\"password\", \"DRftgyhu@12\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5f8ac12c-54a8-4a57-b05f-67b7fa2d2e5b",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.globals.set(\"token\", jsonData.id_token);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{Authorization}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"grant_type\": \"http://auth0.com/oauth/grant-type/password-realm\",\r\n    \"realm\": \"Username-Password-Authentication\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"client_id\": \"hquZHO8JNsaIScoayPtCS5VELdn7TnVq\",\r\n    \"audience\": \"https://api-gw.dev.platform.linuxfoundation.org/\",\r\n    \"scope\": \"access:api openid profile email\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://linuxfoundation-dev.auth0.com/oauth/token",
											"protocol": "https",
											"host": [
												"linuxfoundation-dev",
												"auth0",
												"com"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Role Scope with User role",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a33e434a-09b9-4f76-8b4d-7a9c757cf2a6",
												"exec": [
													"pm.globals.set(\"Role_ID\", \"97573b76-f558-46c7-a8a5-65c7afe7fb5e\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d8cc8a1b-e3b3-48fa-9a8c-b8263719061c",
												"exec": [
													"pm.test(\"User don't have access to assign user role scope : 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"does not have access to resource or path\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"EmailAddress\": \"rajashreeb+582@proximabiz.com\",\r\n  \"ObjectID\": \"a096s000000371EAAQ|0014100000TdzaXAAR\",\r\n  \"ObjectType\": \"project|organization\",\r\n  \"RoleID\": \"{{Role_ID}}\"\r\n}   ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/scopes",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"scopes"
											]
										}
									},
									"response": []
								}
							],
							"description": "Assign User Role Scope with valid Org ID : should result 200",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update User Role with User Role",
							"item": [
								{
									"name": "Delete User Role with User Role",
									"item": [
										{
											"name": "Delete User Role Scope with User role",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c219b2a5-5c0c-4c5f-9288-f1469962ea15",
														"exec": [
															"pm.test(\"Delete User Role Scope with User Role : 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"pm.test(\"Valid Error Message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"does not have access to resource or path\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token}}"
													}
												],
												"url": {
													"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/roles/{{Role_ID}}/scopes/{{Scope_ID}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"orgs",
														"0016s000004DAOKAA4",
														"roles",
														"{{Role_ID}}",
														"scopes",
														"{{Scope_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Update User Role Scope with User role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "616a4a23-4ae7-4771-b63e-da877334df44",
												"exec": [
													"pm.test(\"Update User Role Scope with User role : 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"does not have access to resource or path\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ObjectID\": \"0016s000004DAOKAA4\",\r\n  \"ObjectType\": \"organization\",\r\n  \"RoleID\": \"{{Role_ID}}\",\r\n  \"ScopeID\": \"{{Scope_ID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4/scopes/{{Scope_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"0016s000004DAOKAA4",
												"scopes",
												"{{Scope_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Automate User Role Assignment -\r\nCreate User Role Assignment\r\nUpdate User Role\r\nDelete User Role",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "To automate all scenarios for User Role Scope Assignment endpoints",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Organization",
					"item": [
						{
							"name": "Create organization with invalid bearer token",
							"item": [
								{
									"name": "Create Organization with invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f703bce0-648a-43d4-b0ec-dd90cf685586",
												"exec": [
													"pm.test(\"Invalid token should responde 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer 123"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Education\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org 091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test091601.org\",\r\n  \"TotalEmployees\":200\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create organization with valid User token",
							"item": [
								{
									"name": "Create Organization with User role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fd758ba-dd5e-455b-9a49-5cda638a5329",
												"exec": [
													"var reqBody = request.data;\r",
													"var rb = JSON.parse(reqBody);\r",
													"delete rb[\"Employee\"];\r",
													"delete rb[\"Website\"];\r",
													"var resBody = responseBody;\r",
													"var rqb = JSON.parse(resBody);\r",
													"delete rqb[\"ID\"];\r",
													"delete rqb[\"CreatedAt\"];\r",
													"delete rqb[\"Status\"];\r",
													"delete rqb[\"LastModifiedAt\"];\r",
													"delete rqb[\"Link\"];\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"var flag = true;\r",
													"pm.test(\"Response data matches to request data\", function ()\r",
													"{\r",
													"if( _.isEqual(rb, rqb))\r",
													"    flag = true;\r",
													"else\r",
													"    flag = false;\r",
													"pm.expect(flag).to.eql(true);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"pm.globals.set(\"Org_ID\", jsonData.ID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Education\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org 091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test091601.org\",\r\n  \"TotalEmployees\":200\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "User should become Company Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b5c1878-4fe1-4cee-a1b1-28db96524db2",
												"exec": [
													"//test if he is company owner"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create same name Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c8f50b0-4022-47ce-a4ec-f2caae246e6f",
												"exec": [
													"\r",
													"pm.test(\"Same name organization should give 409\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Education\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org 091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test092301.org\",\r\n  \"TotalEmployees\":200\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Organization without mandatory field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27ca3662-cc18-41a4-92d6-137e1b9b102f",
												"exec": [
													"\r",
													"pm.test(\"Missing required field should give 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"pm.test(\"Valid Error Message\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"in body is required\");\r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n \r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Education\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org 091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test092301.org\",\r\n  \"TotalEmployees\":200\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9467e59c-f036-4ac2-b1d1-3fcb86942cfe",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{s_admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"{{Org_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create new organization with Company Owner",
							"item": [
								{
									"name": "Create Organization with Company Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51f83159-c472-4457-8af1-36081a68375e",
												"exec": [
													"var reqBody = request.data;\r",
													"var rb = JSON.parse(reqBody);\r",
													"delete rb[\"Employee\"];\r",
													"delete rb[\"Website\"];\r",
													"var resBody = responseBody;\r",
													"var rqb = JSON.parse(resBody);\r",
													"delete rqb[\"ID\"];\r",
													"delete rqb[\"CreatedAt\"];\r",
													"delete rqb[\"Status\"];\r",
													"delete rqb[\"LastModifiedAt\"];\r",
													"delete rqb[\"Link\"];\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response data matches to request data\", function ()\r",
													"{\r",
													"console.log( _.isEqual(rb, rqb));\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"pm.globals.set(\"Org_ID\", jsonData.ID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{co_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Education\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org 091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test091601.org\",\r\n  \"TotalEmployees\":200\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84b2233e-661a-451c-8b8e-9189aba28950",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{s_admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"{{Org_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "To automate all scenarios related to List Organization endpoint",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Organization",
					"item": [
						{
							"name": "Verifiy access for restricted fields",
							"item": [
								{
									"name": "Create test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8179b78-c9d3-44da-9b28-1e1f3e76029e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.globals.set(\"Org_ID\", jsonData.ID);\r",
													"pm.globals.set(\"Org_nm\", jsonData.Name);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Education\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org 091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Phone\": \"9090000888\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test091601.org\",\r\n  \"TotalEmployees\":200\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Display Restricted fields to Company Owner Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9db8d8bb-eb4e-4d99-bbaa-9042ba4ff91b",
												"exec": [
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Restricted field Owner is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Owner.Name != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Phone is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Phone != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Source is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Source != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Industry is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Industry != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedBy is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedBy != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field CreatedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].CreatedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field BillingAddress is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].BillingAddress != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Link is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Link != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{co_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?name={{Org_nm}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "name",
													"value": "{{Org_nm}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Display Restricted fields to LF Program Manager Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4792a23e-e449-49cf-b18b-6909568f0258",
												"exec": [
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Restricted field Owner is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Owner.Name != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Phone is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Phone != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Source is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Source != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Industry is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Industry != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedBy is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedBy != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field CreatedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].CreatedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field BillingAddress is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].BillingAddress != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Link is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Link != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{lf_pm_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?name={{Org_nm}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{Org_nm}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Don't display restricted fields to User role Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef25f1ce-c7cc-4cc3-924d-d60add74a27a",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Restricted field Owner is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Owner != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Phone is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Phone != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Source is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Source != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Industry is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Industry != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedBy is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedBy != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedAt is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field CreatedAt is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].CreatedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field BillingAddress is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].BillingAddress != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Link is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Link != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?name={{Org_nm}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{Org_nm}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82686aa0-2a7f-4e90-9cd8-aa44d7ceec44",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{s_admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"{{Org_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Verify that Company Owner and LF Role users should have access to restricted fields and User role should not",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Query Param of Search Organization ",
							"item": [
								{
									"name": "Create test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62bd023b-641a-4856-a762-8d18f4cfa8f8",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"console.log(jsonData.ID)\r",
													"pm.globals.set(\"Org_ID\", jsonData.ID);\r",
													"pm.globals.set(\"Description\", jsonData.Description);\r",
													"pm.globals.set(\"Org_nm\", jsonData.Name);\r",
													"pm.globals.set(\"Phone\", jsonData.Phone);\r",
													"pm.globals.set(\"Link\", jsonData.Link);\r",
													"pm.globals.set(\"Type\", jsonData.Type);\r",
													"pm.globals.set(\"Source\", jsonData.Source);\r",
													"pm.globals.set(\"Industry\", jsonData.Industry);\r",
													"pm.globals.set(\"Domains\", jsonData.Domains);\r",
													"pm.globals.set(\"Status\", jsonData.Status);\r",
													"//var encoded = encodeURIComponent(jsonData.Name);\r",
													"//pm.globals.set(\"Org_nm_Encoded\", encoded);\r",
													"setTimeout(() => {}, [10000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Industry 091601\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Phone\": \"9090000888\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test0915_01.org\",\r\n  \"TotalEmployees\":200\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb43fee0-91d9-437e-8470-58cfef59cc9a",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Type should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Type).to.eql(pm.globals.get(\"Type\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?type={{Type}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "{{Type}}"
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "{{Phone}}",
													"disabled": true
												},
												{
													"key": "website",
													"value": "{{Link}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with valid Organization Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06692f00-4af4-4b40-92f8-44fd6a869524",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Searched Organization name should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Name).to.eql(pm.globals.get(\"Org_nm\"));\r",
													"    pm.expect(jsonData.Metadata.TotalSize).to.eql(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8c65ffda-abf3-4401-acab-5781701d9b0e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?name={{Org_nm}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Rejected",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq Computers, electronics",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 083101",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{Org_nm}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with Website",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0efd04d0-d8f2-4b9e-b8f7-a4abffb5e11e",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given website should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Link).to.eql(pm.globals.get(\"Link\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?website={{Link}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "{{Phone}}",
													"disabled": true
												},
												{
													"key": "website",
													"value": "{{Link}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with valid Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef344dfe-4712-4d64-a61a-9d80c5c8c638",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Searched Organization Description should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Description).to.eql(pm.globals.get(\"Description\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?description={{Description}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Rejected",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq Computers, electronics",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "description",
													"value": "{{Description}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with valid Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2edd3850-dd8e-4ec8-bc86-58603688c316",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Status should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Status).to.eql(pm.globals.get(\"Status\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?status={{Status}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq Computers, electronics",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "{{Status}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with Phone",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11f6a6d2-6f88-4769-a498-54e6cb84a8bb",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Phone# should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Phone).to.eql(pm.globals.get(\"Phone\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?phone={{Phone}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "{{Phone}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with Source",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a44f2ba9-e0cc-4e56-a5a5-888e75862484",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Source should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Source).to.eql(pm.globals.get(\"Source\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?source={{Source}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "{{Type}}",
													"disabled": true
												},
												{
													"key": "source",
													"value": "{{Source}}"
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "{{Phone}}",
													"disabled": true
												},
												{
													"key": "website",
													"value": "{{Link}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with Industry",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d189b16e-f734-4127-8d6e-e678d281d0ad",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Industry should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Source).to.eql(pm.globals.get(\"Industry\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?industry={{Industry}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "{{Type}}",
													"disabled": true
												},
												{
													"key": "source",
													"value": "{{Source}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "{{Phone}}",
													"disabled": true
												},
												{
													"key": "website",
													"value": "{{Link}}",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "{{Industry}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with Domains",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b40dc80d-e78a-4f67-a770-85859c4aa375",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Domains should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Domains).to.eql(pm.globals.get(\"Domains\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?domain={{Domains}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "{{Type}}",
													"disabled": true
												},
												{
													"key": "source",
													"value": "{{Source}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "{{Phone}}",
													"disabled": true
												},
												{
													"key": "website",
													"value": "{{Link}}",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "{{Domains}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with invalid Organization Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10d156a1-1f62-43ef-8ddb-0c840a08f0da",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Invalid Organization name should give 0 count response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"  \r",
													"    pm.expect(jsonData.Metadata.TotalSize).to.eql(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?name=test123",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Rejected",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq Computers, electronics",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 083101",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "test123"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d30bb64-8f05-44cb-a891-03b606a0b4ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{s_admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"{{Org_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify $filter for Search Organization",
							"item": [
								{
									"name": "Create test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fde2d2fe-e496-40dc-9800-4eb4066abf9e",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"console.log(jsonData.ID)\r",
													"pm.globals.set(\"Org_ID\", jsonData.ID);\r",
													"pm.globals.set(\"Org_nm\", jsonData.Name);\r",
													"pm.globals.set(\"Phone\", jsonData.Phone);\r",
													"pm.globals.set(\"Link\", jsonData.Link);\r",
													"pm.globals.set(\"Type\", jsonData.Type);\r",
													"pm.globals.set(\"Source\", jsonData.Source);\r",
													"pm.globals.set(\"Industry\", jsonData.Industry);\r",
													"pm.globals.set(\"Domains\", jsonData.Domains);\r",
													"pm.globals.set(\"Status\", jsonData.Status);\r",
													"setTimeout(() => {}, [3000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Education\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org 091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Phone\": \"9090000888\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test0915_01.org\",\r\n  \"TotalEmployees\":200\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with filter ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2d36fc7-ce44-42fc-a54c-3b6d8377e840",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given ID should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].ID).to.eql(pm.globals.get(\"Org_ID\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?$filter=id eq {{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq Computers, electronics",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq {{Org_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with filter Industry",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a759c08c-1be0-4c84-aa59-f61af128cc53",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Industry should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Industry).to.eql(pm.globals.get(\"Industry\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?$filter=industry eq {{Industry}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq {{Industry}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with filter Source",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b63092-590a-41ea-a1b6-c220d538d2d3",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Source should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Source).to.eql(pm.globals.get(\"Source\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?$filter=source eq {{Source}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "{{Type}}",
													"disabled": true
												},
												{
													"key": "source",
													"value": "{{Source}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "{{Phone}}",
													"disabled": true
												},
												{
													"key": "website",
													"value": "{{Link}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq {{Source}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with filter Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4053532-969b-4c78-a022-e09cd00f03a0",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Type should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Type).to.eql(pm.globals.get(\"Type\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?$filter=type eq {{Type}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "{{Type}}",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "{{Phone}}",
													"disabled": true
												},
												{
													"key": "website",
													"value": "{{Link}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq {{Type}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with filter Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9a8ce70-9e20-475e-abda-c55b2d6748ad",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Status should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Status).to.eql(pm.globals.get(\"Status\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?$filter=status eq {{Status}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq Computers, electronics",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "{{Status}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq {{Status}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Organization with filter Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37335b7f-6d29-4642-98bc-0f4383de5e5a",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given name should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Name).to.eql(pm.globals.get(\"Org_nm\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/search?$filter=name eq {{Org_nm}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"search"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq {{Org_nm}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "222b8434-6b4f-4a88-8966-1f3716a7614a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{s_admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"{{Org_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search Organization with valid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6af8c8b9-963b-4acd-941c-7d214423f0d6",
										"exec": [
											"pm.test(\"Search Organization with valid token should given 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"let jsonData = pm.response.json();\r",
											"console.log(jsonData.Data[0].Name);\r",
											"pm.globals.set(\"Org_nm\", jsonData.Data[0].Name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{BaseURL}}/orgs/search",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"search"
									],
									"query": [
										{
											"key": "type",
											"value": "Customer",
											"disabled": true
										},
										{
											"key": "source",
											"value": "Event-Promo",
											"disabled": true
										},
										{
											"key": "phone",
											"value": "(978) 761-7453",
											"disabled": true
										},
										{
											"key": "status",
											"value": "Rejected",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "industry eq Computers, electronics",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "ownerid ne 00541000002w50SAAQ",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "source eq Event-Promo",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "status eq Approved",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "type eq Former Customer",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "name eq Org 180801",
											"disabled": true
										},
										{
											"key": "website",
											"value": "openstack.org",
											"disabled": true
										},
										{
											"key": "description",
											"value": "Description 083101",
											"disabled": true
										},
										{
											"key": "industry",
											"value": "Education",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "id eq 0012M00002O0zYKQAZ",
											"disabled": true
										},
										{
											"key": "domain",
											"value": "http://www.test090101.org",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Curso%20Seja%2B",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Organization with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d5764cd-745c-4fbb-8057-663ce3aa4070",
										"exec": [
											"pm.test(\"Search Organization with invalid token should given 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Valid Error Message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"This is invalid token, please provide the valid token\");\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer 123"
									}
								],
								"url": {
									"raw": "{{BaseURL}}/orgs/search",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"search"
									],
									"query": [
										{
											"key": "type",
											"value": "Customer",
											"disabled": true
										},
										{
											"key": "source",
											"value": "Event-Promo",
											"disabled": true
										},
										{
											"key": "phone",
											"value": "(978) 761-7453",
											"disabled": true
										},
										{
											"key": "status",
											"value": "Rejected",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "industry eq Computers, electronics",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "ownerid ne 00541000002w50SAAQ",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "source eq Event-Promo",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "status eq Approved",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "type eq Former Customer",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "name eq Org 180801",
											"disabled": true
										},
										{
											"key": "website",
											"value": "openstack.org",
											"disabled": true
										},
										{
											"key": "description",
											"value": "Description 083101",
											"disabled": true
										},
										{
											"key": "industry",
											"value": "Education",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "id eq 0012M00002O0zYKQAZ",
											"disabled": true
										},
										{
											"key": "domain",
											"value": "http://www.test090101.org",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Curso%20Seja%2B",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Automate scenarios related to Search Organization endpoint",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "List Organization",
					"item": [
						{
							"name": "Verifiy access for restricted fields Copy",
							"item": [
								{
									"name": "Create test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4591c093-a1e5-4a12-8244-4a5a946b1a8c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.globals.set(\"Org_ID\", jsonData.ID);\r",
													"pm.globals.set(\"Org_nm\", jsonData.Name);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Education\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org 091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Phone\": \"9090000888\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test091601.org\",\r\n  \"TotalEmployees\":200\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Display Restricted fields to Company Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df249050-6a6a-4d5d-95ce-7691b51dfbc8",
												"exec": [
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Restricted field Owner is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Owner.Name != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Phone is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Phone != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Source is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Source != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Industry is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Industry != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedBy is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedBy != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field CreatedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].CreatedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field BillingAddress is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].BillingAddress != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Link is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Link != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{co_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?name={{Org_nm}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "name",
													"value": "{{Org_nm}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Display Restricted fields to LF Program Manager Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c903de9-805e-41a4-af36-c19f958e8d67",
												"exec": [
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Restricted field Owner is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Owner.Name != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Phone is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Phone != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Source is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Source != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Industry is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Industry != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedBy is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedBy != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field CreatedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].CreatedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field BillingAddress is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].BillingAddress != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Link is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Link != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{lf_pm_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?name={{Org_nm}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{Org_nm}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Don't display restricted fields to User role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28a0aacf-dc1d-43bf-bdd8-e255e6932235",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Restricted field Owner is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Owner != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Phone is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Phone != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Source is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Source != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Industry is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Industry != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedBy is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedBy != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedAt is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].LastModifiedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field CreatedAt is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].CreatedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field BillingAddress is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].BillingAddress != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Link is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Data[0].Link != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?name={{Org_nm}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{Org_nm}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8474961a-7550-4449-9dca-4e566fcf2cfb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{s_admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"{{Org_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Verify that Company Owner and LF Role users should have access to restricted fields and User role should not",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Query Param of List Organization",
							"item": [
								{
									"name": "Create test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdcc9cc8-1287-4f84-aafe-fc0ffdb8f570",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"console.log(jsonData.ID)\r",
													"pm.globals.set(\"Org_ID\", jsonData.ID);\r",
													"pm.globals.set(\"Org_nm\", jsonData.Name);\r",
													"pm.globals.set(\"Phone\", jsonData.Phone);\r",
													"pm.globals.set(\"Link\", jsonData.Link);\r",
													"pm.globals.set(\"Type\", jsonData.Type);\r",
													"pm.globals.set(\"Source\", jsonData.Source);\r",
													"pm.globals.set(\"Industry\", jsonData.Industry);\r",
													"pm.globals.set(\"Domains\", jsonData.Domains);\r",
													"pm.globals.set(\"Status\", jsonData.Status);\r",
													"//var encoded = encodeURIComponent(jsonData.Name);\r",
													"//pm.globals.set(\"Org_nm_Encoded\", encoded);\r",
													"setTimeout(() => {}, [3000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Industry 091601\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Phone\": \"9090000888\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test0915_01.org\",\r\n  \"TotalEmployees\":200\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Organization with valid Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7468ffb9-18b8-44ea-87d7-b263c9f1d8fd",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Status should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Status).to.eql('{{Status}}');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?status={{Status}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq Computers, electronics",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "{{Status}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Organization with Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daab4f22-9f34-4b3e-9fec-920437ca6895",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given ID should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].ID).to.eql(pm.globals.get(\"Org_ID\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{s_admin_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?id={{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "id",
													"value": "{{Org_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Organization with valid Organization Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f79f4adb-3f04-4937-933a-0366693adb0d",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Searched Organization name should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Name).to.eql(pm.globals.get(\"Org_nm\"));\r",
													"    pm.expect(jsonData.Metadata.TotalSize).to.eql(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3f66e125-b5e1-4ee9-85f2-34ae657f419d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?name={{Org_nm}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Rejected",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq Computers, electronics",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 083101",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{Org_nm}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Organization with Domains",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2692318b-1ee3-458c-908c-71905188b9d5",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Domains should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Domains).to.eql(pm.globals.get(\"Domains\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?domain={{Domains}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "type",
													"value": "{{Type}}",
													"disabled": true
												},
												{
													"key": "source",
													"value": "{{Source}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "{{Phone}}",
													"disabled": true
												},
												{
													"key": "website",
													"value": "{{Link}}",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "{{Domains}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Organization with invalid Organization Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f67af9c8-4102-4a30-baa2-fd38a0743647",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Invalid Organization name should give 0 count response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"  \r",
													"    pm.expect(jsonData.Metadata.TotalSize).to.eql(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?name=test123",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Rejected",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq Computers, electronics",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 083101",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "test123"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3277697-2d51-4284-8c4c-e74d96e6c654",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{s_admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"{{Org_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify $filter for List Organization",
							"item": [
								{
									"name": "Create test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bdb6f8e-b18e-4e4a-b656-4a800086b787",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.globals.set(\"Org_ID\", jsonData.ID);\r",
													"\r",
													"setTimeout(() => {}, [3000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{s_admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Education\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org 091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Phone\": \"9090000888\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test0915_01.org\",\r\n  \"TotalEmployees\":200\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Organization with filter ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da9b433d-542c-43e3-9fe2-13b635a5fd02",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given ID should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].ID).to.eql(pm.globals.get(\"Org_ID\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?$filter=id eq {{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq Computers, electronics",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq {{Org_ID}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Organization with filter Industry",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7c22e5f-b6b3-4657-9d63-92b2fc131b04",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Industry should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Industry).to.eql(pm.globals.get(\"Industry\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?$filter={{Industry}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "{{Industry}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Organization with filter Source",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68f804ad-51dc-48a1-b45f-008a61817dca",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Source should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Source).to.eql(pm.globals.get(\"Source\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?$filter=source eq {{Source}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "type",
													"value": "{{Type}}",
													"disabled": true
												},
												{
													"key": "source",
													"value": "{{Source}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "{{Phone}}",
													"disabled": true
												},
												{
													"key": "website",
													"value": "{{Link}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq {{Source}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Organization with filter Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88284b63-3808-4c5d-bc01-f386209a4a16",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Type should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Type).to.eql(pm.globals.get(\"Type\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?$filter=type eq {{Type}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "type",
													"value": "{{Type}}",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "{{Phone}}",
													"disabled": true
												},
												{
													"key": "website",
													"value": "{{Link}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq {{Type}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Organization with filter Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e7452a7-b605-4ec2-abc3-16c8a8d86587",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given Status should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Status).to.eql(pm.globals.get(\"Status\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?$filter=status eq {{Status}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry eq Computers, electronics",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq Org 180801",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "{{Status}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq {{Status}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Organization with filter Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ae5eb90-dcde-46ef-ba35-5db04b66fa17",
												"exec": [
													"pm.test(\"Response code should be 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Organization with given name should appear in response\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Data[0].Name).to.eql(pm.globals.get(\"Org_nm\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{user_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs?$filter=name eq {{Org_nm}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs"
											],
											"query": [
												{
													"key": "type",
													"value": "Customer",
													"disabled": true
												},
												{
													"key": "source",
													"value": "Event-Promo",
													"disabled": true
												},
												{
													"key": "phone",
													"value": "(978) 761-7453",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ownerid ne 00541000002w50SAAQ",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "source eq Event-Promo",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "status eq Approved",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "type eq Former Customer",
													"disabled": true
												},
												{
													"key": "website",
													"value": "openstack.org",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Description 091506",
													"disabled": true
												},
												{
													"key": "industry",
													"value": "Education",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "id eq 0012M00002O0zYKQAZ",
													"disabled": true
												},
												{
													"key": "domain",
													"value": "http://www.test090101.org",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Org 091601",
													"disabled": true
												},
												{
													"key": "status",
													"value": "Pending",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "ID eq {{Org_ID}}",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "industry ne Education",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "800",
													"disabled": true
												},
												{
													"key": "$filter",
													"value": "name eq {{Org_nm}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete test Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fff3957-7067-40ca-ae41-865fa8605dbc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{s_admin_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"{{Org_ID}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List Organization with valid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c27f6c5-12ac-46ec-8fd2-daaa646b7baa",
										"exec": [
											"pm.test(\"List Organization should give 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{s_admin_token}}"
									}
								],
								"url": {
									"raw": "{{BaseURL}}/orgs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs"
									],
									"query": [
										{
											"key": "status",
											"value": "Pending",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "ownerid ne 00541000002w50SAAQ",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "source eq Event-Promo",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "status eq Approved",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "type eq Former Customer",
											"disabled": true
										},
										{
											"key": "id",
											"value": "0012M00002O0zYKQAZ",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "id ne 00117000018f5frAAA",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "industry eq Education",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "name eq Pantek, Inc.",
											"disabled": true
										},
										{
											"key": "industry",
											"value": null,
											"disabled": true
										},
										{
											"key": "domain",
											"value": "org200801.com",
											"disabled": true
										},
										{
											"key": " Technology (DGIST)",
											"value": null,
											"disabled": true
										},
										{
											"key": "name",
											"value": "Curso%20Seja%2B",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Organization with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c942cc7-07e5-4b55-8fc7-2232377a6272",
										"exec": [
											"pm.test(\"List Organization with invalid token should give 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer  123"
									}
								],
								"url": {
									"raw": "{{BaseURL}}/orgs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs"
									],
									"query": [
										{
											"key": "status",
											"value": "Pending",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "ownerid ne 00541000002w50SAAQ",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "source eq Event-Promo",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "status eq Approved",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "type eq Former Customer",
											"disabled": true
										},
										{
											"key": "id",
											"value": "0012M00002O0zYKQAZ",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "id ne 00117000018f5frAAA",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "industry eq Education",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "name eq Pantek, Inc.",
											"disabled": true
										},
										{
											"key": "industry",
											"value": null,
											"disabled": true
										},
										{
											"key": "domain",
											"value": "org200801.com",
											"disabled": true
										},
										{
											"key": " Technology (DGIST)",
											"value": null,
											"disabled": true
										},
										{
											"key": "name",
											"value": "Curso%20Seja%2B",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Automate all scenarios related to List Organization endpoint",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Organization",
					"item": [
						{
							"name": "Create test Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a41efd7-42b9-4667-aa42-cc70ecfa8c31",
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(jsonData.ID)\r",
											"pm.globals.set(\"Org_ID\", jsonData.ID);\r",
											"pm.globals.set(\"Org_nm\", jsonData.Name);\r",
											"pm.globals.set(\"Phone\", jsonData.Phone);\r",
											"pm.globals.set(\"Link\", jsonData.Link);\r",
											"pm.globals.set(\"Type\", jsonData.Type);\r",
											"pm.globals.set(\"Source\", jsonData.Source);\r",
											"pm.globals.set(\"Industry\", jsonData.Industry);\r",
											"pm.globals.set(\"Domains\", jsonData.Domains);\r",
											"pm.globals.set(\"Status\", jsonData.Status);\r",
											"setTimeout(() => {}, [3000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Education\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org 091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Phone\": \"9090000888\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test0915_01.org\",\r\n  \"TotalEmployees\":200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test Organization with invalid Organization ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07d9d5f0-be0a-4d1b-8d4e-f04949246374",
										"exec": [
											"pm.test(\"Invalid Organization Code should give 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Valid Error Message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"organization not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{s_admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/123",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test Organization with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bae7b08f-90d8-4c00-9bb0-2df3ef060c56",
										"exec": [
											"pm.test(\"Invalid Token Code should give 401\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Valid Error Message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"This is invalid token, please provide the valid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer 123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test Organization with unauthorized user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b9ee48e-2a7b-4f87-a29a-484766810bbf",
										"exec": [
											"pm.test(\"Unauthorized Token should give 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Valid Error Message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"user does not have permission to delete the organization: forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96949ca7-38aa-40be-bb2c-827f491eaa8f",
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{s_admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Automate test cases related to Delete Organization endpoint",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Organization",
					"item": [
						{
							"name": "Verifiy access for restricted fields Copy",
							"item": [
								{
									"name": "Get Organization of Company Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79ecd487-fd24-40ea-8c56-0f77d7c68800",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"console.log(jsonData.ID)\r",
													"pm.globals.set(\"Org_ID\", jsonData.ID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{co_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/me",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"me"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Display Restricted fields to Company Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3b2d9e5-1cd7-4fc1-8dfb-5450d11d078f",
												"exec": [
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Restricted field Owner is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Owner.Name != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Phone is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Phone != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Source is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Source != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Industry is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Industry != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedBy is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.LastModifiedBy != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.LastModifiedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field CreatedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.CreatedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field BillingAddress is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.BillingAddress != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Link is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Link != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{co_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"{{Org_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organization of LF Program Manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef0b4648-65a9-4ac7-adf1-e818cfa3ed53",
												"exec": [
													"let jsonData = pm.response.json();\r",
													"console.log(jsonData.ID)\r",
													"pm.globals.set(\"Org_ID\", jsonData.ID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{lf_pm_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/me",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"me"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Display Restricted fields to LF Program Manager Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60a0017b-e422-470f-b363-f846d828e74d",
												"exec": [
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Restricted field Owner is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Owner.Name != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Phone is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Phone != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Source is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Source != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field Industry is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Industry != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedBy is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.LastModifiedBy != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field LastModifiedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.LastModifiedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field CreatedAt is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.CreatedAt != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});\r",
													"pm.test(\"Restricted field BillingAddress is not visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.BillingAddress != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(false);\r",
													"});\r",
													"pm.test(\"Restricted field Link is visible\", function () {\r",
													"    var flag = false;\r",
													"    if (jsonData.Link != null )\r",
													"    {  flag = true;}\r",
													"    pm.expect(flag).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{lf_pm_token}}"
											}
										],
										"url": {
											"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orgs",
												"{{Org_ID}}"
											],
											"query": [
												{
													"key": "basic",
													"value": "false",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Verify that Company Owner and LF Role users should have access to restricted fields and User role should not",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User role should not have access to Get Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99637518-7fae-4a20-b9eb-77d60a5ce349",
										"exec": [
											"pm.test(\"User role should give 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Valid Error Message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"user does not have permission to get the organization: forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}"
									],
									"query": [
										{
											"key": "basic",
											"value": "false",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User role should not have access to Get Organization Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc392726-ba36-406a-96ad-2bab31b347da",
										"exec": [
											"pm.test(\"Invalid Organization Id should give 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Valid Error Message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"organization not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{s_admin_token}}"
									}
								],
								"url": {
									"raw": "{{BaseURL}}/orgs/123",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"123"
									],
									"query": [
										{
											"key": "basic",
											"value": "false",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Organization with valid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3ce77d6-3ee9-475d-8ab3-70c87beffd88",
										"exec": [
											"pm.test(\"Get Organization should give 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{s_admin_token}}"
									}
								],
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}"
									],
									"query": [
										{
											"key": "status",
											"value": "Pending",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "ownerid ne 00541000002w50SAAQ",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "source eq Event-Promo",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "status eq Approved",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "type eq Former Customer",
											"disabled": true
										},
										{
											"key": "id",
											"value": "0012M00002O0zYKQAZ",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "id ne 00117000018f5frAAA",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "industry eq Education",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "name eq Pantek, Inc.",
											"disabled": true
										},
										{
											"key": "industry",
											"value": null,
											"disabled": true
										},
										{
											"key": "domain",
											"value": "org200801.com",
											"disabled": true
										},
										{
											"key": " Technology (DGIST)",
											"value": null,
											"disabled": true
										},
										{
											"key": "name",
											"value": "Curso%20Seja%2B",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Organization with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ba58130-ec6a-46bd-bdc2-28f2dba3c741",
										"exec": [
											"pm.test(\"Get Organization with invalid token should give 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer  123"
									}
								],
								"url": {
									"raw": "{{BaseURL}}/orgs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs"
									],
									"query": [
										{
											"key": "status",
											"value": "Pending",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "ownerid ne 00541000002w50SAAQ",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "source eq Event-Promo",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "status eq Approved",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "type eq Former Customer",
											"disabled": true
										},
										{
											"key": "id",
											"value": "0012M00002O0zYKQAZ",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "id ne 00117000018f5frAAA",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "industry eq Education",
											"disabled": true
										},
										{
											"key": "$filter",
											"value": "name eq Pantek, Inc.",
											"disabled": true
										},
										{
											"key": "industry",
											"value": null,
											"disabled": true
										},
										{
											"key": "domain",
											"value": "org200801.com",
											"disabled": true
										},
										{
											"key": " Technology (DGIST)",
											"value": null,
											"disabled": true
										},
										{
											"key": "name",
											"value": "Curso%20Seja%2B",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Automate all scenarios related to List Organization endpoint",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update Organization",
					"item": [
						{
							"name": "Get Organization of Company Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33673e6c-3188-4e31-9bc6-e9cc61567278",
										"exec": [
											"let jsonData = pm.response.json();\r",
											"console.log(jsonData.ID)\r",
											"pm.globals.set(\"Org_ID\", jsonData.ID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{co_token}}"
									}
								],
								"url": {
									"raw": "{{BaseURL}}/me",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"me"
									],
									"query": [
										{
											"key": "basic",
											"value": "false",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Organization with Company owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58b2af14-9eaa-4cb2-bbda-16d9f5ae0a1f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Updated data should reflect in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.Description).to.eql(\"Updated Description\");\r",
											"    pm.expect(jsonData.Industry).to.eql(\"Banking\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{co_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Industry\": \"Banking\",\n    \"Description\" : \"Updated Description\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Organization with existing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc3e5e4f-0a3b-4d6e-8067-ba2687a97734",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Valid Error Message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name already taken\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{co_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\" : \"Hitachi, Ltd.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Organization with invalid Org ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83a9238d-cd78-4085-954a-c6dfe59f60c7",
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Valid Error Message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"user does not have permission to update the organization: forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{co_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Industry\": \"Banking\",\n    \"Description\" : \"Updated Description\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/123",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Organization with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8649553a-9700-4375-9ee3-3f026406bb78",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer 124"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Industry\": \"Banking\",\n    \"Description\" : \"Updated Description\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Automate test cases related to Update Organization endpoint.",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Add New Address",
					"item": [
						{
							"name": "Create test Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbd7f4c8-e3be-49d8-a02d-f14c0259326b",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"Org_ID\", jsonData.ID);\r",
											"setTimeout(() => {}, [5000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org091601.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Industry 091601\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org091601\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Phone\": \"9090000888\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test0915_01.org\",\r\n  \"TotalEmployees\":200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new Address with valid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8562a7e0-644e-40a4-9b3d-ef0eafc7be6c",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"console.log(jsonData.ID);\r",
											"pm.globals.set(\"Addr_id\", jsonData.ID);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var reqBody = request.data;\r",
											"var rb = JSON.parse(reqBody);\r",
											"var resBody = responseBody;\r",
											"var rqb = JSON.parse(resBody);\r",
											"delete rqb[\"ID\"];\r",
											"pm.test(\"Response data matches to request data\", function ()\r",
											"{\r",
											"    pm.expect(rb).to.eql(rqb);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"BillToName\": \"Bill Name 3\",\r\n  \"City\": \"Pune\",\r\n  \"Country\": \"India\",\r\n  \"PostalCode\": \"tes44t\",\r\n  \"State\": \"MH\",\r\n  \"Street\": \"A4/103 Amphitheatre Parkway\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}/addresses",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new Address with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db2c58d9-303a-466c-bdfc-88c9669c7123",
										"exec": [
											"\r",
											"pm.test(\"Invalid token should give 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer 123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"BillToName\": \"Bill Name 3\",\r\n  \"City\": \"Pune\",\r\n  \"Country\": \"India\",\r\n  \"PostalCode\": \"tes44t\",\r\n  \"State\": \"MH\",\r\n  \"Street\": \"A4/103 Amphitheatre Parkway\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}/addresses",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new Address for other organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a42da708-038f-4868-9823-ad5461dc59bb",
										"exec": [
											"pm.test(\"User should add address for other organization\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"O_Addr_id\", jsonData.ID);\r",
											"//0930 : As discussed with Nirav as of now we are allowing access to other organizations."
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"BillToName\": \"Bill Name 3\",\r\n  \"City\": \"Pune\",\r\n  \"Country\": \"India\",\r\n  \"PostalCode\": \"tes44t\",\r\n  \"State\": \"MH\",\r\n  \"Street\": \"A4/103 Amphitheatre Parkway\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/addresses",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"0014100000Te04HAAR",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "956ed87f-ed0c-41cb-9768-7035efd19d10",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Organization address should appear in response\", function () \r",
											"{\r",
											"pm.expect(jsonData.Data[0].ID).to.equal(pm.globals.get(\"Addr_id\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}/addresses",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Address for other organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6ac1e4f-203a-41f4-aa37-eef91079dd10",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"/*pm.test(\"Valid error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"user does not have permission to get the organization: forbidden\");\r",
											"});*/\r",
											"//0930 : As discussed with Nirav as of now we are allowing access to other organizations.\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/addresses",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"0014100000Te04HAAR",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Address with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f7cee43-846b-49e0-9321-d4af7adef41c",
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer 123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}/addresses",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0286b5fa-875a-47b6-9e2a-640ba47f2b7c",
										"exec": [
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Updated data should reflect in response\", function () {\r",
											"       pm.expect(jsonData.City).to.eql(\"Mumbai\");\r",
											"});\r",
											"console.log(jsonData.City);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4fc005f9-38b8-49ac-ac3e-c370714e5d98",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"City\": \"Mumbai\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}/addresses/{{Addr_id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}",
										"addresses",
										"{{Addr_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Address for other organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa720f9d-e5b7-4210-a1fe-5a4b9d822daa",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//0930 : As discussed with Nirav as of now we are allowing access to other organizations."
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"City\": \"Mumbai\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/addresses/{{O_Addr_id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"0014100000Te04HAAR",
										"addresses",
										"{{O_Addr_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Address with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "470cef88-2c8b-4b7b-8fc8-b0a9a0ac43b3",
										"exec": [
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer 123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"City\": \"Mumbai\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}/addresses/{{Addr_id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}",
										"addresses",
										"{{Addr_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "513fe53a-b8f9-43e1-a011-fa514a75d1fa",
										"exec": [
											"\r",
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}/addresses/{{Addr_id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}",
										"addresses",
										"{{Addr_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Address with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25c5d6d0-0d3f-4d47-9b9e-1270c7533b08",
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer 123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}/addresses/{{Addr_id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}",
										"addresses",
										"{{Addr_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Address for other organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f23087b-3cf4-4bb1-b19f-986000895c10",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/addresses/{{O_Addr_id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"0014100000Te04HAAR",
										"addresses",
										"{{O_Addr_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e76fe14c-023a-4850-be56-e9ca4fbac472",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{s_admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orgs",
										"{{Org_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Automate test cases related to Add New Address endpoint",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Maintain all automation scenarios per folder",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Organization",
			"item": [
				{
					"name": "GetMyOrganization",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/me?basic=false",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"me"
							],
							"query": [
								{
									"key": "basic",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "My Organization V2",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlJFWTNSVGcyTTBVMk5URTRSamcwTUVRNU9VSkZRMFpGTVVGRVJUaEVRVVF5TTBZeVF6QXhOQSJ9.eyJpc3MiOiJodHRwczovL2xpbnV4Zm91bmRhdGlvbi1kZXYuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfGxmdTM1IiwiYXVkIjpbImh0dHBzOi8vYXBpLWd3LmRldi5wbGF0Zm9ybS5saW51eGZvdW5kYXRpb24ub3JnLyIsImh0dHBzOi8vbGludXhmb3VuZGF0aW9uLWRldi5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjAwOTI5MTg0LCJleHAiOjE2MDA5NTA3ODQsImF6cCI6ImhxdVpITzhKTnNhSVNjb2F5UHRDUzVWRUxkbjdUblZxIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBhY2Nlc3M6YXBpIiwiZ3R5IjoicGFzc3dvcmQifQ.myJiAklHjEpAEDXvNzkEX5MrALJNF27PresFjtpr-lHCMOZ_fuBOkil_r4PaS_HGDyT8lOaptrBrcKpMeJytr0fl53IKtuED_885-MoXkqBEyE-MBLBKNAutNV3qZAjJeRgTxOgd9ZJxSHr-HQE7NBEzjG063idLatbHSP6jEitit8VDYE0Jm-Xq55EeHYy3Yuu-evDPyxAbMJfne6UeAi5gD6xs-XaWTPz6LQ1oDASAOFBmWPDruzlEYLAse9cVFpIeAXkF8drsordgeysvnO15NOtvnm5qx_Jkzur26ymbvPZV2vIlnIuKykMN8V18xUiuio2mC2Sx_sCHjpQgcQ"
							}
						],
						"url": {
							"raw": "https://api-gw.dev.platform.linuxfoundation.org/organization-service/v2/me",
							"protocol": "https",
							"host": [
								"api-gw",
								"dev",
								"platform",
								"linuxfoundation",
								"org"
							],
							"path": [
								"organization-service",
								"v2",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateOrganization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73a360a7-54ab-4b9b-865f-41908d915bd2",
								"exec": [
									"var reqBody = request.data;\r",
									"var rb = JSON.parse(reqBody);\r",
									"delete rb[\"Employee\"];\r",
									"delete rb[\"Website\"];\r",
									"var resBody = responseBody;\r",
									"var rqb = JSON.parse(resBody);\r",
									"delete rqb[\"ID\"];\r",
									"delete rqb[\"CreatedAt\"];\r",
									"delete rqb[\"Status\"];\r",
									"delete rqb[\"LastModifiedAt\"];\r",
									"delete rqb[\"Link\"];\r",
									"\r",
									"console.log(rqb);\r",
									"pm.test(\"Valid Response data\", function ()\r",
									"{\r",
									"console.log( _.isEqual(rb, rqb));\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"Org_ID\", jsonData.ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"BillingAddress\": {\r\n    \"BillingCity\": \"Mountain View\",\r\n    \"BillingCountry\": \"United States\",\r\n    \"BillingPostalCode\": \"94043\",\r\n    \"BillingState\": \"CA\",\r\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\r\n  },\r\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\r\n  \"Description\": \"Description 091506\",\r\n  \"Domains\": \"Org092801.com\",\r\n  \"Employee\": \"500\",\r\n  \"Github\": \"https://gitlab.com/0xdco21\",\r\n  \"Gitlab\": \"https://github.com/0xdco21\",\r\n  \"Industry\": \"Education\",\r\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\r\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\r\n  \"Name\": \"Org 092801\",\r\n  \"Source\": \"Event-Promo\",\r\n  \"Type\": \"Customer\",\r\n  \"Website\": \"http://www.test092801.org\",\r\n  \"TotalEmployees\":200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bee7745-b06d-4115-9e88-96bcdca876ed",
								"exec": [
									"pm.test(\"Get Organization\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"Verified Organization ID\", function () {\r",
									"    pm.expect(jsonData.ID).to.eql(Org_ID);\r",
									"    console.log(Org_ID);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/0016s000004EYbUAAW",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0016s000004EYbUAAW"
							],
							"query": [
								{
									"key": "domain",
									"value": "http://www.test083101.org",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Pending",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "ownerid ne 00541000002w50SAAQ",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "source eq Event-Promo",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "status eq Approved",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "type eq Former Customer",
									"disabled": true
								},
								{
									"key": "id",
									"value": "00117000018f5frAAA",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "id ne 00117000018f5frAAA",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "industry eq Education",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "name eq Pantek, Inc.",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Org 083101",
									"disabled": true
								},
								{
									"key": "industry",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteOrganization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39ff28c8-bc86-4986-8262-9dde310819a8",
								"exec": [
									"pm.test(\"Delete Org 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/{{Org_ID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"{{Org_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all prospect sponsorships by organization ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/prospect-sponsorships",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000Te04HAAR",
								"prospect-sponsorships"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all sponsorships by organization ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/prospect-sponsorships",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000Te04HAAR",
								"prospect-sponsorships"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get sponsorship summary by organization ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/sponsorships/summary",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000Te04HAAR",
								"sponsorships",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchOrganization",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/search?name=Org 092801",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"search"
							],
							"query": [
								{
									"key": "type",
									"value": "Customer",
									"disabled": true
								},
								{
									"key": "source",
									"value": "Event-Promo",
									"disabled": true
								},
								{
									"key": "phone",
									"value": "(978) 761-7453",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Rejected",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "industry eq Computers, electronics",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "ownerid ne 00541000002w50SAAQ",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "source eq Event-Promo",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "status eq Approved",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "type eq Former Customer",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "name eq Org 180801",
									"disabled": true
								},
								{
									"key": "website",
									"value": "openstack.org",
									"disabled": true
								},
								{
									"key": "description",
									"value": "Description 083101",
									"disabled": true
								},
								{
									"key": "industry",
									"value": "Education",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "id eq 0012M00002O0zYKQAZ",
									"disabled": true
								},
								{
									"key": "domain",
									"value": "http://www.test090101.org",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Org 092801"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Organization",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs?name=Curso%20Seja%2B",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs"
							],
							"query": [
								{
									"key": "status",
									"value": "Pending",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "ownerid ne 00541000002w50SAAQ",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "source eq Event-Promo",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "status eq Approved",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "type eq Former Customer",
									"disabled": true
								},
								{
									"key": "id",
									"value": "0012M00002O0zYKQAZ",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "id ne 00117000018f5frAAA",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "industry eq Education",
									"disabled": true
								},
								{
									"key": "$filter",
									"value": "name eq Pantek, Inc.",
									"disabled": true
								},
								{
									"key": "industry",
									"value": null,
									"disabled": true
								},
								{
									"key": "domain",
									"value": "org200801.com",
									"disabled": true
								},
								{
									"key": " Technology (DGIST)",
									"value": null,
									"disabled": true
								},
								{
									"key": "name",
									"value": "Curso%20Seja%2B"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateOrganization",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Industry\": \"Banking\",\n    \"Domains\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0016s000004DAOKAA4"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateOrganization Copy",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"BillingAddress\": {\n    \"BillingCity\": \"Mountain View\",\n    \"BillingCountry\": \"United States\",\n    \"BillingPostalCode\": \"94043\",\n    \"BillingState\": \"CA\",\n    \"BillingStreet\": \"1600 Amphitheatre Parkway\"\n  },\n  \"CrunchBaseURL\" : \"https://www.crunchbase.com/organization/amazon-web-services\",\n  \"Description\": \"Description 090101\",\n  \"Domains\": \"Org091501.com\",\n  \"Employee\": \"500\",\n  \"Github\": \"https://gitlab.com/0xdco21\",\n  \"Gitlab\": \"https://github.com/0xdco21\",\n  \"Industry\": \"Education\",\n  \"LinkedInURL\" : \"http://www.linkedin.com/company/google\",\n  \"LogoURL\": \"https://www.linuxfoundation.org/wp-content/uploads/2017/06/LF_logo_NEW_H_W.png\",\n  \"Name\": \"Org 091501\",\n  \"Source\": \"Event-Promo\",\n  \"Website\": \"http://www.test091501.org\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/0016s000004DAOKAA4",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0016s000004DAOKAA4"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Service User Scope",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/servicescopes",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000Te04HAAR",
								"servicescopes"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Admin User Scope",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/00117000019LNG1AAO/adminscopes",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"00117000019LNG1AAO",
								"adminscopes"
							],
							"query": [
								{
									"key": "rolename",
									"value": "company-owner",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User Role Scope",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2e21675-084a-4eaf-9d18-4afdd09ff12f",
								"exec": [
									"pm.globals.set(\"Role_ID\", \"97573b76-f558-46c7-a8a5-65c7afe7fb5e\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "415c7bf6-fd03-4e60-975b-e009fb313aaf",
								"exec": [
									"pm.test(\"User Role Scope Assignment 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(pm.globals.get(\"Role_ID\"));\r",
									"\r",
									"pm.globals.set(\"Scope_ID\", jsonData.RoleScopes[0].Scopes[0].ScopeID);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"EmailAddress\": \"rajashreeb+553@proximabiz.com\",\r\n  \"ObjectID\": \"a096s000000371EAAQ|0014100000Te04HAAR\",\r\n  \"ObjectType\": \"project|organization\",\r\n  \"RoleID\": \"{{Role_ID}}\"\r\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/scopes",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000Te04HAAR",
								"scopes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ce893dd-660b-43bb-babe-4b216f61ed60",
								"exec": [
									"pm.test(\"Update User Role Scope 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ObjectID\": \"{{Org_ID}}\",\r\n  \"ObjectType\": \"organization\",\r\n  \"RoleID\": \"{{Role_ID}}\",\r\n  \"ScopeID\": \"{{Scope_ID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/scopes/{{Scope_ID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000Te04HAAR",
								"scopes",
								"{{Scope_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Role Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4501cc71-ade2-4211-b9af-bd020a818b66",
								"exec": [
									"pm.test(\"Delete User Role Scope 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/roles/{{Role_ID}}/scopes/{{Scope_ID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000Te04HAAR",
								"roles",
								"{{Role_ID}}",
								"scopes",
								"{{Scope_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Invite",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/0012M00002OugBpQAJ/invites",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0012M00002OugBpQAJ",
								"invites"
							],
							"query": [
								{
									"key": "status",
									"value": "canceled",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get Committee Contacts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/00117000019LNG1AAO/committees",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"00117000019LNG1AAO",
								"committees"
							],
							"query": [
								{
									"key": "category",
									"value": "Working Group",
									"disabled": true
								},
								{
									"key": "Status",
									"value": "Active",
									"disabled": true
								},
								{
									"key": "projectID",
									"value": "a0917000008z9PRAAY",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get List of Committee",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/list-committees",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000Te04HAAR",
								"list-committees"
							],
							"query": [
								{
									"key": "category",
									"value": "Working Group",
									"disabled": true
								},
								{
									"key": "projectID",
									"value": "a0917000008z9PRAAY",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Recent Purchase 200",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/purchases/recent?projectid=a0941000002wByYAAU",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000Te04HAAR",
								"purchases",
								"recent"
							],
							"query": [
								{
									"key": "projectid",
									"value": "a0941000002wByYAAU"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Contacts To Committee",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"AppointedBy\": \"Community\",\r\n  \"ContactID\": \"00317000013q3VwAAI\",\r\n  \"ProjectID\": \"a09170000090vvlAAA\",\r\n  \"Role\": \"Chair\",\r\n  \"RoleEndDate\": \"2021-03-20\",\r\n  \"RoleStartDate\": \"2020-03-20\",\r\n  \"Status\": \"Active\",\r\n  \"VotingEndDate\": \"2021-03-20\",\r\n  \"VotingStartDate\": \"2020-03-20\",\r\n  \"VotingStatus\": \"Observer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/00117000019LNG1AAO/committees/a2i17000001AuQBAA0/members",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"00117000019LNG1AAO",
								"committees",
								"a2i17000001AuQBAA0",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Contacts To Committee",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"AppointedBy\": \"Vote of Silver Member Class\",\r\n  \"ContactID\": \"00317000010Nb30AAC\",\r\n  \"ProjectID\": \"a0917000008z9PRAAY\",\r\n  \"Role\": \"Counsel\",\r\n  \"RoleEndDate\": \"2021-03-20\",\r\n  \"RoleStartDate\": \"2020-03-20\",\r\n  \"Status\": \"Active\",\r\n  \"VotingEndDate\": \"2021-03-20\",\r\n  \"VotingStartDate\": \"2020-03-20\",\r\n  \"VotingStatus\": \"Observer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/committees/a2i17000001AtqVAAS/members/a2j17000000uUwKAAU",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000Te04HAAR",
								"committees",
								"a2i17000001AtqVAAS",
								"members",
								"a2j17000000uUwKAAU"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Contacts To Committee",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/0014100000Te04HAAR/committees/a2i17000001AtqVAAS/members/a2j17000000u8WoAAI",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"0014100000Te04HAAR",
								"committees",
								"a2i17000001AtqVAAS",
								"members",
								"a2j17000000u8WoAAI"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Address",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/00117000019Lkh9AAC/addresses",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"00117000019Lkh9AAC",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new Address",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"BillToName\": \"Bill Name 3\",\r\n  \"City\": \"Pune\",\r\n  \"Country\": \"India\",\r\n  \"PostalCode\": \"tes44t\",\r\n  \"State\": \"MH\",\r\n  \"Street\": \"A4/103 Amphitheatre Parkway\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/00117000019Lkh9AAC/addresses",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"00117000019Lkh9AAC",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Address",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"City\": \"Mumbai\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/00117000019Lkh9AAC/addresses/a2a17000000mClxAAE",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"00117000019Lkh9AAC",
								"addresses",
								"a2a17000000mClxAAE"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Address",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{Authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orgs/00117000019Lkh9AAC/addresses/a2a17000000mCmlAAE",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orgs",
								"00117000019Lkh9AAC",
								"addresses",
								"a2a17000000mCmlAAE"
							]
						}
					},
					"response": []
				}
			],
			"description": "To cover all endpoints from Organization",
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}